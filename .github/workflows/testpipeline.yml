name: CI/CD Pipeline

on:
  pull_request: 
    branches: [ "*" ]
  push:
    branches: [ "*" ]
    tags:
      - 'v*'



jobs:
  run-tests:
    if: "!startsWith(github.ref, 'refs/tags/')"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.23.3/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version
      
      - name: Build test environment
        run: docker-compose -f docker-compose.test.yml build
      
      - name: Run tests
        run: bash run-test.sh

  build-push-latest:
    runs-on: ubuntu-latest
    needs: run-tests
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v3
      
      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.23.3/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version
      
      - name: Login to ACR
        uses: azure/docker-login@v1
        with:
          login-server: ${{ secrets.ACR_LOGIN_SERVER }}
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}
      
      - name: Build and push latest images
        run: |
          docker-compose -f docker-compose.build.yml build
          docker-compose -f docker-compose.build.yml push
        env:
          BACKEND_IMAGE_TAG: "latest"
          FRONTEND_IMAGE_TAG: "latest"
          LOGIN_SERVER: ${{ secrets.ACR_LOGIN_SERVER }}

  build-push-tagged:
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - uses: actions/checkout@v3
      
      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.23.3/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version
      
      - name: Login to ACR
        uses: azure/docker-login@v1
        with:
          login-server: ${{ secrets.ACR_LOGIN_SERVER }}
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}
      
      - name: Extract version tag
        id: extract_version
        run: echo "TAG_VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
      
      - name: Build and push versioned images
        run: |
          docker-compose -f docker-compose.build.yml build
          docker-compose -f docker-compose.build.yml push
        env:
          BACKEND_IMAGE_TAG: ${{ env.TAG_VERSION }}
          FRONTEND_IMAGE_TAG: ${{ env.TAG_VERSION }}
          LOGIN_SERVER: ${{ secrets.ACR_LOGIN_SERVER }}

  deploy-infrastructure:
    runs-on: ubuntu-latest
    needs: build-push-tagged
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - uses: actions/checkout@v3
      
      - name: Install Terraform
        uses: hashicorp/setup-terraform@v2
      
      - name: Install Azure CLI
        run: |
          curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
          az --version

      - name: Azure Login
        run: az login --service-principal -u ${{ secrets.AZURE_CLIENT_ID }} -p ${{ secrets.AZURE_CLIENT_SECRET }} --tenant ${{ secrets.AZURE_TENANT_ID }}

      - name: Terraform Init
        working-directory: infra/deployment
        run: terraform init
        
      - name: Terraform Apply
        working-directory: infra/deployment
        run: terraform apply -auto-approve
        env:
          TF_VAR_resource_group_name: ${{ env.RESOURCE_GROUP_NAME }}
          TF_VAR_app_service_plan_name: ${{ env.APP_SERVICE_PLAN_NAME }}
          TF_VAR_backend_app_name: ${{ env.BACKEND_APP_NAME }}
          TF_VAR_frontend_app_name: ${{ env.FRONTEND_APP_NAME }}
          TF_VAR_acr_login_server: ${{ secrets.ACR_LOGIN_SERVER }}
          TF_VAR_backend_image: ${{ env.BACKEND_IMAGE }}
          TF_VAR_backend_image_tag: ${{ env.TAG_VERSION }}
          TF_VAR_frontend_image: ${{ env.FRONTEND_IMAGE }}
          TF_VAR_frontend_image_tag: ${{ env.TAG_VERSION }}
          TF_VAR_acr_name: ${{ env.ACR_NAME }}
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

  cleanup:
    runs-on: ubuntu-latest
    if: always()
    needs:
      - run-tests
      - build-push-latest
      - build-push-tagged
      - deploy-infrastructure
    steps:
      - name: Prune Docker resources
        run: |
          docker container prune -f
          docker image prune -a -f
          docker system prune -f